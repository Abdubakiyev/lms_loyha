generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MENTOR
  ASSISTANT
  STUDENT
}

enum CourseLevel {
  BEGINNER
  PRE_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
}

enum PaidVia {
  PAYME
  CLICK
  CASH
}

enum HomeworkSubStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExamAnswer {
  variantA
  variantB
  variantC
  variantD
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String   @unique 
  password  String
  role      UserRole @default(STUDENT)
  fullName  String
  image     String?
  createdAt DateTime @default(now())
  refreshToken String?
  isVerified Boolean @default(false)

  payments  Payment[]
  mentorProfile   MentorProfile?
  mentorAssignedCourses AssignedCourse[]   @relation("MentorAssignedCourses")
  userAssignedCourses   AssignedCourse[]   @relation("UserAssignedCourses")
  purchasedCourses PurchasedCourse[]
  ratings         Rating[]
  lastActivity    LastActivity?
  lessonViews     LessonView[]
  homeworkSubmissions HomeworkSubmission[]
  examResults     ExamResult[]
  questions       Question[]
  answers         QuestionAnswer[]
  coursesMentored Course[] @relation("MentorCourses")
}

model MentorProfile {
  id        String  @id @default(uuid())
  about     String?
  job       String?
  experience Int
  telegram  String?
  instagram String?
  linkedin  String?
  facebook  String?
  github    String?
  website   String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

model CourseCategory {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  courses   Course[]
}

model Course {
  id          String   @id @default(uuid())
  name        String
  about       String
  price       Decimal
  banner      String
  introVideo  String?
  level       CourseLevel
  published   Boolean  @default(false)
  categoryId  String
  mentorId    String
  updatedAt   DateTime?
  createdAt   DateTime @default(now())

  category CourseCategory @relation(fields: [categoryId], references: [id])
  mentor   User           @relation("MentorCourses", fields: [mentorId], references: [id])
  assignedCourses AssignedCourse[]
  purchasedCourses PurchasedCourse[]
  payments  Payment[]
  ratings         Rating[]
  questions       Question[]
  lessonGroups    LessonGroup[]
  lastActivities  LastActivity[]
  lessons         Lesson[]
}

model AssignedCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  mentorId  String
  createdAt DateTime @default(now())

  mentor    User   @relation("MentorAssignedCourses", fields: [mentorId], references: [id])
  user      User   @relation("UserAssignedCourses", fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model PurchasedCourse {
  id           String   @id @default(uuid())
  courseId     String
  userId       String
  amount       Decimal?
  paidVia      PaidVia
  purchasedAt  DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Rating {
  id        String   @id @default(uuid())
  rate      Int
  comment   String
  courseId  String
  userId    String
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model LastActivity {
  id        String   @id @default(uuid())
  userId    String   @unique
  courseId  String?
  groupId   String?
  lessonId  String?
  url       String?
  updatedAt DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id])
  course  Course?      @relation(fields: [courseId], references: [id])
  group   LessonGroup? @relation(fields: [groupId], references: [id])
  lesson  Lesson?      @relation(fields: [lessonId], references: [id])
}

model LessonGroup {
  id        String   @id @default(uuid())
  name      String
  courseId  String
  createdAt DateTime @default(now())

  course         Course        @relation(fields: [courseId], references: [id])
  lessons        Lesson[]
  exams          Exam[]
  lastActivities LastActivity[]
  examResults    ExamResult[]
}

model Lesson {
  id        String   @id @default(uuid())
  name      String
  about     String
  video     String
  groupId   String
  courseId  String
  updatedAt DateTime?
  createdAt DateTime @default(now())

  group          LessonGroup     @relation(fields: [groupId], references: [id])
  course         Course          @relation(fields: [courseId], references: [id])
  files          LessonFile[]
  views          LessonView[]
  homework       Homework?
  lastActivities LastActivity[]
}

model LessonView {
  lessonId String
  userId   String
  view     Boolean

  lesson Lesson @relation(fields: [lessonId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([lessonId, userId])
}

model LessonFile {
  id        String   @id @default(uuid())
  file      String
  note      String?
  lessonId  String
  createdAt DateTime @default(now())

  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Homework {
  id        String   @id @default(uuid())
  task      String
  file      String?
  lessonId  String  @unique
  updatedAt DateTime?
  createdAt DateTime @default(now())

  lesson     Lesson               @relation(fields: [lessonId], references: [id])
  submissions HomeworkSubmission[]
}

model HomeworkSubmission {
  id         String   @id @default(uuid())
  text       String?
  file       String
  reason     String?
  status     HomeworkSubStatus @default(PENDING)
  homeworkId String
  userId     String
  updatedAt  DateTime?
  createdAt  DateTime @default(now())

  homework Homework @relation(fields: [homeworkId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Exam {
  id            String   @id @default(uuid())
  question      String
  variantA      String
  variantB      String
  variantC      String
  variantD      String
  answer        ExamAnswer
  lessonGroupId String
  createdAt     DateTime @default(now())

  group LessonGroup @relation(fields: [lessonGroupId], references: [id])
}

model ExamResult {
  id            String   @id @default(uuid())
  lessonGroupId String
  userId        String
  passed        Boolean
  corrects      Int
  wrongs        Int
  createdAt     DateTime @default(now())

  group LessonGroup @relation(fields: [lessonGroupId], references: [id])
  user  User        @relation(fields: [userId], references: [id])
}

model Question {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  text      String
  file      String?
  read      Boolean  @default(false)
  readAt    DateTime?
  updatedAt DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  answer    QuestionAnswer? @relation("QuestionToAnswer")
}

model QuestionAnswer {
  id          String   @id @default(uuid())
  questionId  String   @unique
  userId      String
  text        String
  file        String?
  updatedAt   DateTime?
  createdAt   DateTime @default(now())

  question    Question @relation("QuestionToAnswer", fields: [questionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}
model Payment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  amount     Decimal
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}
